/*
 * Copyright 2016 CSIRO
 *
 * This file is part of Mastik.
 *
 * Mastik is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Mastik is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Mastik.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#include <util.h>
#include <l3.h>

#define SAMPLES 10000
// #define SAMPLES 35000
// #define SAMPLES 200


int main(int ac, char **av) {
  delayloop(3000000000U);

  l3pp_t l3 = l3_prepare(NULL);
  // printf("prepare end\n");

  int nsets = l3_getSets(l3);
  // printf("nsets : %d\n", nsets);

  uint16_t *res = calloc(SAMPLES, sizeof(uint16_t));
  for (int i = 0; i < SAMPLES; i+= 4096/sizeof(uint16_t))
    res[i] = 1;

  // FILE *fp;
  // fp = fopen(av[1], "a+");
  // if(fp == NULL){
  //   printf("file error\n");
  //   exit(1);
  // }
  delayloop(3000000000U);
  delayloop(3000000000U);

  // printf("scan start\n");

  // for (int i = 0; i < nsets; i++) {
  // for(int i = 0; i < nsets; i++){
  //   l3_unmonitorall(l3);
  //   l3_monitor(l3, i);
  //
  //   l3_repeatedprobe(l3, SAMPLES, res, 200);
  //   // l3_repeatedprobecount(l3, SAMPLES, res, 5000);
  //   for (int j = 0; j < SAMPLES; j++) {
  //     printf("%4d ", (int16_t)res[j]);
  //   }
  //   putchar('\n');
  // }
  for(int w = 0; w < 4; w++){
    // for (int i = 48; i < 48 + (1 << 11); i += (1 << 6)){
    // for (int i = 16; i < 16 + (1 << 11); i += (1 << 6)){
    for (int i = 17; i < 17 + (1 << 11); i += (1 << 6)){
    // for(int i = 0; i < 2048; i++){
      l3_unmonitorall(l3);
      l3_monitor(l3, i + 2048 * w);

      // l3_repeatedprobe(l3, SAMPLES, res, 5000);
      l3_repeatedprobecount(l3, SAMPLES, res, 5000);
      // l3_unmonitor(l3, i + 2048 * w);

      for (int j = 0; j < SAMPLES; j++) {
      		printf("%d", (int16_t)res[j]);
      		// fprintf(fp, "%d", (int16_t)res[j]);
          if (j < SAMPLES - 1)
            printf(",");
            // fprintf(fp, ",");
      }				// putchar('\n');
      printf("\n");
      // fprintf(fp, "\n");
    }
  }

  // printf("scan end\n");

  // fclose(fp);
  free(res);
  l3_release(l3);
}
